
==================== FINAL INTERFACE ====================
2017-11-11 16:30:36.335456 UTC

interface main@main:Main 8002
  interface hash: e8d1d10d8504ce4b9096adcc039192ae
  ABI hash: 1188985efd3654d983ad6ddb2c647450
  export-list hash: 8541bd8fda42169cf727f61e8fe71706
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b038a7c862dabf6c0c13835664a20da0
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.addIfAbsent
  Main.getChatTwo
  Main.isAlreadyChat
  Main.main
  Main.mainLoop
  Main.newChat
  Main.runConn
  Main.Chat{Main.Chat chatChannel name}
  Main.Msg
module dependencies:
package dependencies: base-4.9.1.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Control.Concurrent 2ee6a0a58489520b9a96d8fef10380fa
import  -/  base-4.9.1.0:Control.Concurrent.Chan 1fe7f9b5e83f172945517098fa943ef0
import  -/  base-4.9.1.0:Control.Exception a76dd9666251322fe34dbcca3a0817bf
import  -/  base-4.9.1.0:Control.Exception.Base 1e106916283856f4d9caeddab92cd861
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Control.Monad.Fix 1847625fb543f2f5c2510a02760c6b1a
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Function 7aca86bfbd92366def5f260e30cb2628
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Conc.Sync 8d0a228e5fc4d8c110495066f4d52ea1
import  -/  base-4.9.1.0:GHC.Exception e38fa3e73d54022fb9e3ce06477dfd07
import  -/  base-4.9.1.0:GHC.IO.Handle ba98a5b34d78cbf48b41fe58a3735c69
import  -/  base-4.9.1.0:GHC.IO.Handle.Text b65719f3b262b071ab1aabeb72fc9d8b
import  -/  base-4.9.1.0:GHC.IO.Handle.Types 17aa0e2ab137800e3a31992d780c071f
import  -/  base-4.9.1.0:GHC.IO.IOMode 2f5782f93b12a0d860d6d661b9fb405c
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket 52f9b9614bf018ecf5fec5f2570dad23
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket.Types 2eb8a83dc42cc86a12e652ce3294cbda
1438e2264600235cd45aa7b9d3744f59
  $tc'Chat :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4085845306767956767##
                   17678683644899690985##
                   Main.$trModule
                   Main.$tc'Chat1) -}
d96a2ff576df81410e73267b36ec6dc9
  $tc'Chat1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chat"#) -}
4ff7749e0e2b15b91b53e954d29d7a63
  $tcChat :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7619757448994507874##
                   4830155165551668518##
                   Main.$trModule
                   Main.$tcChat1) -}
dc8c9c72bd5f2627bf7885a620047d4b
  $tcChat1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Chat"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
9162845cc9df585cc6eab7bcf325ec43
  $wmainLoop ::
    Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> [Main.Chat]
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U(U)><S,U><L,U><L,U(U)><S,U><L,U><L,U(U)><S,U>,
     Inline: [0] -}
012b38c88636ee345d44c02fb211f0ac
  $wrunConn ::
    GHC.IO.Handle.Types.Handle
    -> Control.Concurrent.Chan.Chan Main.Msg
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <S,U><L,1*U(U,U)><L,U(U)><S,U>,
     Inline: [0] -}
434855a8fbd6136ff92cd949027cfbbf
  data Chat
    = Chat {name :: GHC.Base.String,
            chatChannel :: Control.Concurrent.Chan.Chan Main.Msg}
f4c7da5d252b420bf9c5a099dc18276c
  type Msg = (GHC.Types.Int, GHC.Base.String)
e9e37b6bffe4d66faf18934ad8b94c24
  addIfAbsent :: Main.Chat -> [Main.Chat] -> [Main.Chat]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U)><S,U>,
     Unfolding: (\ (chat :: Main.Chat) (ls :: [Main.Chat]) ->
                 case Main.isAlreadyChat
                        (case chat of wild { Main.Chat ds ds1 -> ds })
                        ls of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ Main.Chat
                        ls
                        (GHC.Types.: @ Main.Chat chat (GHC.Types.[] @ Main.Chat))
                   GHC.Types.True -> ls }) -}
d4ef56fe1d61d2919456302133709dd0
  chatChannel :: Main.Chat -> Control.Concurrent.Chan.Chan Main.Msg
  RecSel Left Main.Chat
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Chat) ->
                 case ds of wild { Main.Chat ds1 ds2 -> ds2 }) -}
2662de08f70acbbc6442b2c7d78766a4
  getChatTwo ::
    GHC.Base.String -> [Main.Chat] -> GHC.Types.IO Main.Chat
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getChatTwo1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <[Main.Chat]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.Chat>_R)) -}
08f1297c98a8eab1e8850a2fbf3b7ab4
  getChatTwo1 ::
    GHC.Base.String
    -> [Main.Chat]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Chat #)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U> -}
93f7740b507b0ab7d94263f4967cb9ae
  isAlreadyChat :: GHC.Base.String -> [Main.Chat] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
cc2553a6271f61bf52c143e09488e2f2
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
10d0ab2bb942cf9882a882ad514d9ce3
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main7
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Network.Socket.$wsocket
                        Network.Socket.Types.AF_INET
                        Network.Socket.Types.Stream
                        0#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case Network.Socket.$wsetSocketOption
                        ww1
                        Network.Socket.ReuseAddr
                        Main.main6
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 case Network.Socket.$wbind
                        ww1
                        ww7
                        Main.main4
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Network.Socket.$wlisten
                        ww1
                        ww7
                        Main.main3
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 Main.$wmainLoop
                   ww1
                   ww2
                   ww3
                   ww4
                   ww7
                   (GHC.Types.[] @ Main.Chat)
                   Main.main2
                   ipv8 } } } } } } }) -}
f126171ae4e08cc337b62f4e9f3a9fd5
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Starting server..."#) -}
fae2bb8668fb9a05a7e51129513d1b7a
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
089009f5a8b08b7d82494188ec931dc6
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0#) -}
5aff556a9b225ae8c261a83d4430ec44
  main3 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 2#) -}
dba46fc678f659328156f986f8e14cca
  main4 :: Network.Socket.Types.SockAddr
  {- Unfolding: (Network.Socket.Types.SockAddrInet
                   Main.main5
                   Network.Socket.iNADDR_ANY) -}
d49b476a789eb4a00111126d88a8e820
  main5 :: Network.Socket.Types.PortNumber
  {- Unfolding: (case {__pkg_ccall network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz htons GHC.Prim.Word#
                                                                                                -> GHC.Prim.State#
                                                                                                     GHC.Prim.RealWorld
                                                                                                -> (# GHC.Prim.State#
                                                                                                        GHC.Prim.RealWorld,
                                                                                                      GHC.Prim.Word# #)}
                        4242##
                        GHC.Prim.realWorld# of wild1 { (#,#) ds ds1 ->
                 (GHC.Word.W16# (GHC.Prim.narrow16Word# ds1))
                   `cast`
                 (Sym (Network.Socket.Types.N:PortNumber[0])) }) -}
1e5926b799ede3e39e77f50a7b1cca01
  main6 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
5ced2f80aa7d30f0ca2b2d058132d601
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   Main.main8) -}
bf63562c368d4b897ff2245b1809d2cd
  main8 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString Main.main10 Main.main9) -}
bab04aef0f39c317e0d77461ef2d176b
  main9 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
71e42f260d629861ad8fad8feb6e1cbb
  mainLoop ::
    Network.Socket.Types.Socket
    -> [Main.Chat] -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.mainLoop1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <[Main.Chat]>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
82180e9b85665009a0c755bf92a9369f
  mainLoop1 ::
    Network.Socket.Types.Socket
    -> [Main.Chat]
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U><L,U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: [Main.Chat])
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Main.$wmainLoop ww1 ww2 ww3 ww4 ww7 w1 w2 w3 } }) -}
8ba753d17207248093e324e2bbbf8eae
  name :: Main.Chat -> GHC.Base.String
  RecSel Left Main.Chat
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Chat) ->
                 case ds of wild { Main.Chat ds1 ds2 -> ds1 }) -}
66f008991259afb4aa9953a1debf73f0
  newChat ::
    GHC.Base.String
    -> Control.Concurrent.Chan.Chan Main.Msg -> GHC.Types.IO Main.Chat
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.newChat1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Control.Concurrent.Chan.Chan Main.Msg>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.Chat>_R)) -}
5cc587daa93adc0a126e8131d70a2924
  newChat1 ::
    GHC.Base.String
    -> Control.Concurrent.Chan.Chan Main.Msg
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Chat #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (chatName :: GHC.Base.String)
                   (chan :: Control.Concurrent.Chan.Chan Main.Msg)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta, Main.Chat chatName chan #)) -}
f41c41d1440cf3e31581fd294c65286c
  runConn ::
    GHC.IO.Handle.Types.Handle
    -> Control.Concurrent.Chan.Chan Main.Msg
    -> Main.Chat
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 5, Strictness: <S,U><L,1*U(U,U)><L,A><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runConn1
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <Control.Concurrent.Chan.Chan Main.Msg>_R
                 ->_R <Main.Chat>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
29920b84ec835b1a3b56a1599077a9f7
  runConn1 ::
    GHC.IO.Handle.Types.Handle
    -> Control.Concurrent.Chan.Chan Main.Msg
    -> Main.Chat
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <S,U><L,1*U(U,U)><L,A><L,U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ (w :: GHC.IO.Handle.Types.Handle)
                   (w1 :: Control.Concurrent.Chan.Chan Main.Msg)
                   (w2 :: Main.Chat)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wrunConn w w1 w3 w4) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

